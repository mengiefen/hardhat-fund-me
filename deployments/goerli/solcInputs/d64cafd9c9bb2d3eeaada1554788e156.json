{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport './PriceConverter.sol';\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  uint256 public minimumUSD = 50;\n  address[] public funders;\n  address public owner;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n    owner = msg.sender;\n  }\n\n  function fund() public payable {\n    // want to able to set a  minimum fund amount in USD\n    // 1. How we send ETH to this contract\n    // 2. How to change currency USD to ETH\n\n    require(\n      msg.value.getConversionRate(priceFeed) >= minimumUSD,\n      \"Didn't send required amount of USD\"\n    );\n\n    // What is reverting?\n    // Undo any action and send back the remaining gas\n\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  function getVersion() internal view returns (uint256) {\n    return priceFeed.version();\n  }\n\n  function withdraw() public view {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < funders.length;\n      funderIndex++\n    ) {}\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    // We need ABI, and Address\n    // Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //   0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    // );\n    (, int256 price, , , ) = priceFeed.latestRoundData(); // ETH in terms of USD\n\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n\n    return ethAmountInUSD;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}